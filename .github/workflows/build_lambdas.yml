name: Build and Deploy Lambdas

on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'crates/**'
  workflow_dispatch:
    inputs:
      lambda:
        description: "Lambda to build/deploy (all | postgres_dataload | pdf_processing)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - postgres_dataload
          - pdf_processing

env:
  LAMBDA_BUCKET: ${{ secrets.LAMBDA_BUCKET_NAME }}  # Set this as a GitHub secret

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev musl-tools perl

      - name: Install Zig (for cargo-lambda)
        run: |
          sudo snap install zig --classic --beta

      - name: Install Cargo Lambda
        run: |
          pipx install cargo-lambda

      - name: Debug - List contents before build
        run: |
          pwd
          ls -R

      - name: Build Postgres Dataload Lambda
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'postgres_dataload' }}
        run: |
          cargo lambda build --release --target x86_64-unknown-linux-musl --package postgres_dataload

      - name: Build PDF Processing Lambda
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'pdf_processing' }}
        run: |
          cargo lambda build --release --target x86_64-unknown-linux-musl --package pdf_processing

      - name: Package Postgres Dataload Lambda
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'postgres_dataload' }}
        run: |
          cp ./target/lambda/postgres_dataload/bootstrap ./bootstrap
          zip postgres_dataload.zip bootstrap
          rm bootstrap

      - name: Package PDF Processing Lambda
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'pdf_processing' }}
        run: |
          cp ./target/lambda/pdf_processing/bootstrap ./bootstrap
          zip pdf_processing.zip bootstrap
          rm bootstrap

      - name: Debug - List contents before upload
        run: |
          pwd
          ls -l

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify S3 Bucket Exists
        run: |
          if ! aws s3api head-bucket --bucket $LAMBDA_BUCKET 2>/dev/null; then
            echo "S3 bucket $LAMBDA_BUCKET doesn't exist or you don't have permission to access it."
            exit 1
          fi

      - name: Upload to S3
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'postgres_dataload' }}
        run: |
          if [[ "${{ inputs.lambda }}" == "postgres_dataload" || "${{ inputs.lambda }}" == "all" ]]; then
            aws s3 cp postgres_dataload.zip s3://$LAMBDA_BUCKET/postgres_dataload.zip
          fi
          if [[ "${{ inputs.lambda }}" == "pdf_processing" || "${{ inputs.lambda }}" == "all" ]]; then
            aws s3 cp pdf_processing.zip s3://$LAMBDA_BUCKET/pdf_processing.zip
          fi

      - name: Update Lambda Functions
        if: ${{ inputs.lambda == 'all' || inputs.lambda == 'postgres_dataload' || inputs.lambda == 'pdf_processing' }}
        run: |
          if [[ "${{ inputs.lambda }}" == "postgres_dataload" || "${{ inputs.lambda }}" == "all" ]]; then
            aws lambda update-function-code --function-name postgres_dataload --s3-bucket $LAMBDA_BUCKET --s3-key postgres_dataload.zip
          fi
          if [[ "${{ inputs.lambda }}" == "pdf_processing" || "${{ inputs.lambda }}" == "all" ]]; then
            aws lambda update-function-code --function-name pdf_processing --s3-bucket $LAMBDA_BUCKET --s3-key pdf_processing.zip
          fi
      